{"ast":null,"code":"var _jsxFileName = \"/home/etudiant/Bureau/test/test2/react-todo-app-v1-master/src/components/TodoForm.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Autocomplete from \"react-google-autocomplete\";\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nconst API_KEY = \"'AIzaSyDE19jz0Ojpx2q-mepUlNKjlH5mUvrkHsM'\";\nconst mapStyles = {\n  width: '70%',\n  height: '100%'\n};\nvar markers = [{\n  id: 1,\n  name: \"Paris\",\n  position: {\n    lat: 48.856788489137216,\n    lng: 2.3521950779098466\n  }\n}, {\n  id: 2,\n  name: \"Tokyo\",\n  position: {\n    lat: 35.68060395408808,\n    lng: 139.7690013067459\n  }\n}, {\n  id: 3,\n  name: \"PÃ©kin\",\n  position: {\n    lat: 39.90445096377794,\n    lng: 116.40744327976226\n  }\n}, {\n  id: 4,\n  name: \"New York\",\n  position: {\n    lat: 40.712776,\n    lng: -74.005974\n  }\n}, {\n  id: 5,\n  name: \"Mexique\",\n  position: {\n    lat: 23.63480446746952,\n    lng: -102.55273572023772\n  }\n}];\n\nfunction TodoForm(props) {\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\n  state = {\n    showingInfoWindow: false,\n    // Hides or shows the InfoWindow\n    activeMarker: {},\n    // Shows the active marker upon click\n    selectedPlace: {},\n    // Shows the InfoWindow to the selected place upon a marker\n    lat: 0,\n    lng: 0\n  };\n\n  onMarkerClick = (props, marker, e) => this.setState({\n    selectedPlace: props,\n    activeMarker: marker,\n    showingInfoWindow: true\n  });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  const inputRef = useRef(null);\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input\n    });\n    setInput('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"todo-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, props.edit ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"Update your item\",\n    value: input,\n    onChange: handleChange,\n    name: \"text\",\n    ref: inputRef,\n    className: \"todo-input edit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmit,\n    className: \"todo-button edit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, \"Update\")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Map, {\n    google: this.props.google,\n    zoom: 3,\n    style: mapStyles,\n    initialCenter: {\n      lat: 7,\n      lng: 7\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 3\n    }\n  }, markers.map(_ref => {\n    let {\n      id,\n      name,\n      position\n    } = _ref;\n    return /*#__PURE__*/React.createElement(Marker, {\n      key: id,\n      position: position,\n      onClick: this.onMarkerClick,\n      name: name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 10\n      }\n    });\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: {\n      lat,\n      lng\n    },\n    onClick: this.onMarkerClick,\n    name: \"Votre position\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(InfoWindow, {\n    marker: this.state.activeMarker,\n    visible: this.state.showingInfoWindow,\n    onClose: this.onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, this.state.selectedPlace.name)))), /*#__PURE__*/React.createElement(Autocomplete, {\n    apiKey: API_KEY,\n    placeholder: \"Ajouter une ville\",\n    onChange: handleChange,\n    name: \"text\",\n    className: \"todo-input\",\n    value: input,\n    ref: inputRef,\n    onPlaceSelected: input => {\n      console.log(input.address_components[0].long_name);\n      console.log(input);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }), \";\", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmit,\n    className: \"todo-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, \"Ajouter\")));\n}\n\nexport default TodoForm;","map":{"version":3,"sources":["/home/etudiant/Bureau/test/test2/react-todo-app-v1-master/src/components/TodoForm.js"],"names":["React","useState","useEffect","useRef","Autocomplete","Map","GoogleApiWrapper","InfoWindow","Marker","API_KEY","mapStyles","width","height","markers","id","name","position","lat","lng","TodoForm","props","input","setInput","edit","value","state","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","marker","e","setState","onClose","inputRef","current","focus","handleChange","target","handleSubmit","preventDefault","onSubmit","Math","floor","random","text","google","map","console","log","address_components","long_name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Autocomplete from \"react-google-autocomplete\";\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\n\nconst API_KEY = \"'AIzaSyDE19jz0Ojpx2q-mepUlNKjlH5mUvrkHsM'\";\n\nconst mapStyles = {\n  width: '70%',\n  height: '100%'\n};\n\nvar markers = [\n  {\n    id: 1,\n    name: \"Paris\",\n    position: { lat: 48.856788489137216, lng: 2.3521950779098466 }\n  },\n  {\n    id: 2,\n    name: \"Tokyo\",\n    position: { lat: 35.68060395408808, lng: 139.7690013067459 }\n  },\n  {\n    id: 3,\n    name: \"PÃ©kin\",\n    position: { lat: 39.90445096377794, lng: 116.40744327976226 }\n  },\n  {\n    id: 4,\n    name: \"New York\",\n    position: { lat: 40.712776, lng: -74.005974 }\n  },\n  {\n    id: 5,\n    name: \"Mexique\",\n    position: { lat: 23.63480446746952, lng: -102.55273572023772}\n  }\n];\n\n\nfunction TodoForm(props) {\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\n\n  state = {\n    showingInfoWindow: false,  // Hides or shows the InfoWindow\n    activeMarker: {},          // Shows the active marker upon click\n    selectedPlace: {} ,         // Shows the InfoWindow to the selected place upon a marker\n   \n     \n    lat: 0,\n      lng: 0,\n  };\n\n  onMarkerClick = (props, marker, e) =>\n  this.setState({\n    selectedPlace: props,\n    activeMarker: marker,\n    showingInfoWindow: true\n  });\n\nonClose = props => {\n  if (this.state.showingInfoWindow) {\n    this.setState({\n      showingInfoWindow: false,\n      activeMarker: null\n    });\n  }\n};\n\n  const inputRef = useRef(null);\n\n\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input\n    });\n    setInput('');\n  };\n\n\n  return (\n    <form onSubmit={handleSubmit} className='todo-form'>\n      {props.edit ? (\n        <>\n          <input\n            placeholder='Update your item'\n            value={input}\n            onChange={handleChange}\n            name='text'\n            ref={inputRef}\n            className='todo-input edit'\n          />\n          <button onClick={handleSubmit} className='todo-button edit'>\n            Update\n          </button>\n        </>\n      ) : (\n        <>\n  \n  <Map\n        google={this.props.google}\n        zoom={3}\n        style={mapStyles}\n        initialCenter={{\n          \n          lat: 7,\n          lng: 7\n\n          \n        }}\n      >\n       \n       {markers.map(({id, name, position }) => (\n         <Marker\n         key={id}\n         position={position}\n         onClick={this.onMarkerClick}\n         name={name}\n       ></Marker>\n       ))}\n\n      <Marker position={{ lat, lng }} onClick={this.onMarkerClick} name=\"Votre position\"/>\n     \n        \n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <div>\n            <h4>{this.state.selectedPlace.name}</h4>\n          </div>\n        </InfoWindow>\n      </Map>\n\n      <Autocomplete\n    apiKey= {API_KEY}\n    placeholder='Ajouter une ville'\n    onChange={handleChange}\n    name='text'\n    className='todo-input'\n    value = {input}\n    ref={inputRef}\n    onPlaceSelected={(input) =>{ \n    \n    console.log(input.address_components[0].long_name)\n    console.log(input)\n    \n    }}\n  \n/>;\n\n          <button onClick={handleSubmit} className='todo-button'>\n            Ajouter\n          </button>\n        </>\n      )}\n    </form>\n  );\n}\n\nexport default TodoForm;\n"]},"metadata":{},"sourceType":"module"}