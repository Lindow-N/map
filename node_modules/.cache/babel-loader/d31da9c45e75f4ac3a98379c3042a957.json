{"ast":null,"code":"var _jsxFileName = \"/home/etudiant/Bureau/test/test2/react-todo-app-v1-master/src/components/TodoForm.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Autocomplete from 'react-google-autocomplete';\n\nfunction TodoForm(props) {\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\n  const inputRef = useRef(null);\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input\n    });\n    setInput('');\n  };\n\n  onPlaceSelected = place => {\n    console.log('plc', place);\n    const address = place.formatted_address,\n          addressArray = place.address_components,\n          city = this.getCity(addressArray);\n    console.log('latvalue', latValue);\n    console.log('lngValue', lngValue); // Set these values in the state.\n\n    this.setState({\n      address: address ? address : '',\n      area: area ? area : '',\n      city: city ? city : ''\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"todo-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, props.edit ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"Update your item\",\n    value: input,\n    onChange: handleChange,\n    name: \"text\",\n    ref: inputRef,\n    className: \"todo-input edit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmit,\n    className: \"todo-button edit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, \"Update\")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"Ajouter une ville\",\n    value: input,\n    onChange: handleChange,\n    name: \"text\",\n    className: \"todo-input\",\n    ref: inputRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Autocomplete, {\n    style: {\n      width: '100%',\n      height: '40px',\n      paddingLeft: '16px',\n      marginTop: '2px',\n      marginBottom: '2rem'\n    },\n    onPlaceSelected: this.onPlaceSelected,\n    types: ['(regions)'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 27\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmit,\n    className: \"todo-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, \"Ajouter\")));\n}\n\nexport default TodoForm;","map":{"version":3,"sources":["/home/etudiant/Bureau/test/test2/react-todo-app-v1-master/src/components/TodoForm.js"],"names":["React","useState","useEffect","useRef","Autocomplete","TodoForm","props","input","setInput","edit","value","inputRef","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","onPlaceSelected","place","console","log","address","formatted_address","addressArray","address_components","city","getCity","latValue","lngValue","setState","area","width","height","paddingLeft","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Autocomplete from 'react-google-autocomplete';\n\n\nfunction TodoForm(props) {\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\n\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input\n    });\n    setInput('');\n  };\n\n  onPlaceSelected = (place) => {\n    console.log('plc', place);\n    const address = place.formatted_address,\n        addressArray = place.address_components,\n        city = this.getCity(addressArray);\n\n    console.log('latvalue', latValue)\n    console.log('lngValue', lngValue)\n\n    // Set these values in the state.\n    this.setState({\n        address: (address) ? address : '',\n        area: (area) ? area : '',\n        city: (city) ? city : '',\n        \n    })\n};\n\n  return (\n    <form onSubmit={handleSubmit} className='todo-form'>\n      {props.edit ? (\n        <>\n          <input\n            placeholder='Update your item'\n            value={input}\n            onChange={handleChange}\n            name='text'\n            ref={inputRef}\n            className='todo-input edit'\n          />\n          <button onClick={handleSubmit} className='todo-button edit'>\n            Update\n          </button>\n        </>\n      ) : (\n        <>\n          <input\n            placeholder='Ajouter une ville'\n            value={input}\n            onChange={handleChange}\n            name='text'\n            className='todo-input'\n            ref={inputRef}\n          />\n\n                          <Autocomplete\n                            style={{\n                                width: '100%',\n                                height: '40px',\n                                paddingLeft: '16px',\n                                marginTop: '2px',\n                                marginBottom: '2rem'\n                            }}\n                            onPlaceSelected={this.onPlaceSelected}\n                            types={['(regions)']}\n                        />\n\n          <button onClick={handleSubmit} className='todo-button'>\n            Ajouter\n          </button>\n        </>\n      )}\n    </form>\n  );\n}\n\nexport default TodoForm;\n"]},"metadata":{},"sourceType":"module"}